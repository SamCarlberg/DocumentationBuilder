configurations {
    javaSource
}

dependencies {
    javaSource 'edu.wpi.first.wpiutil:wpiutil-java:+:sources'
    javaSource 'edu.wpi.first.ntcore:ntcore-java:+:sources'
    javaSource 'edu.wpi.first.cscore:cscore-java:+:sources'
    javaSource 'edu.wpi.first.wpilibj:wpilibj-java:+:sources'
    javaSource 'org.opencv:opencv-java:+:sources'
}

def javaDepLocation = "${buildDir}/javaSrc"
def javaFilesList = configurations.javaSource.files

def javaDownloadList = []

task downloadAllJava {}

configurations.javaSource.dependencies.each { dependency ->
    def classifier = dependency.artifacts[0].classifier
    def extension = dependency.artifacts[0].extension
    def taskName = "download${dependency.group}${dependency.name}${classifier}"
    def task = tasks.create(taskName, Copy) {
        def file
        javaFilesList.each {
            if (it.toString().endsWith("${classifier}.${extension}") && it.toString().contains("${dependency.name}-".toString())) {
                file = it
            }
        }
        from rootProject.zipTree(file)
        into "$javaDepLocation/${dependency.name.toLowerCase()}/${classifier}"
    }
    downloadAllJava.dependsOn task
    javaDownloadList.add(task)
}

apply plugin: 'java'

sourceSets {
    docs {
        java {
           srcDir "$projectDir/build/javaSrc"
        }
    }
}

task generateJavaDocs(type: Javadoc) {
    javadoc.options.links("http://docs.oracle.com/javase/8/docs/api/")
    options.addStringOption "tag", "pre:a:Pre-Condition"
    options.addStringOption('Xdoclint:accessibility,syntax,html', '-quiet')
    source = sourceSets.docs.java
    failOnError = true
}

generateJavaDocs.dependsOn downloadAllJava

task zipJavaDocs(type: Zip) {
    baseName = 'javaDocs'
    destinationDir = buildDir
    dependsOn generateJavaDocs
    from ("$buildDir/docs/javadoc")
    into '/'
}
